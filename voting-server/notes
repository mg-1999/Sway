Redux

- application state is stored in a single tree structure
-formed out of maps and arrays
- the state is isolated from the application behaviour, and can be analyzed purely as data

Our App
- collection of items to vote on called entries
- vote -> pair => 2 items from entries collection
- vote -> tally => 2 items from entries collection => 4,3
- losing entry is thrown away and winning entry is returned to bottom of entries collection
- repeat til winner is decided

Immutable
- state is an immutable tree
- the state tree will never change
- to change state. you need to produce another new state tree
- apply a function that takes old state and returns new state
- this allows you to keep a history of all the previous app states, allowing for easy (undo/redo)
- most important thing is that with immutable data, functions are pure - they take and return data, nothing else, deterministic
- allows for easy testing
- numbers are immutable in a similar way, their state can't be modified, they can only be replace with a new number
    ex. 42 ++ returns 43 ALL THE TIME
- that same thing can be applied to data structures
- An immutable List can for example store a list of movies. If we added a movie to the list we'd have to produce a new list that combines the old list with the new movie, while keeping the old state as is
- this applies to maps too, and nested data structures, same principle throughout
- these data structres are persistent, meaning that producing new versions is internally structured to be time efficient, unlike regular data structures.
- Rich Hickey - immutability by convention doesn't exist

Actions and Reducers
-in redux you don't call core functions directly, there's a layer between called actions
-action is just an object that stores a type key, and optional other values
- the type value is passed through a generic function called a reducer which takes the action type and the state and invokes the appropriate function
- the interesting part is you can actually pass in a collection of past states and REDUCE them to the current state
- quite like a reduce callback function
-essentially we can replay a collection of actions, and even pass actions as objects over the network as serialized JSON

Reducer Composition
- should pass pieces of state to functions rather than the whole thing, modularize it

Redux Store
- stores state of application over time
- pass in your reducer function to the store and it will be intialized
- you can dispatch actions and get the current state at any point
-redux only stores the current state tree. That's it.
- highly customizable
- super low cost of integration

Socket.IO
- abstraction of websockets
- server need to tell clients about current state
- this is done by emitting Socket event to all connected clients when something changes
- you can SUBSCRIBE to a redux store
- run a callback after an action is called that alerts a change has been made

JSDOM
- create js versions of document and window objects that are usually provided by browser
- put them on global object so React will discover them
- more efficient testing than PhantomJS
- essentially creates a fake DOM on nodeJS backend

React and react-hot-loader
- with redux and immutatble you can create dumb stateless components with all props
- so component state is stored inside Redux store
- react hot loader allows for hot reloading without losing state

Immutable Data in React
- if we use only immutable data as props, then React doesn't need to do a deep evaluation of the changes
- we know that if we put a particular data set in, then the UI will always be rendered that way, so we only need to check if the props is pointing to a different value
- can use purerendermixin to do this shallow search

React Router
- used to implement routing
- use root route component to define common styles

Client Side Redux
- this is where redux is more commonly used
- essentially storing the same stuff as on the server, except for the hasVoted flag to render the UI differently
- think of actions and reducers based on things that could cause the state to change while application is running
- user interactions - clicks vote button on voting page, or next button on results page
- changes from the server
- we used socketio to emit a state event
- should use client action to recieve state snapshot from server and merge it into client
- we'll be getting regular JS DS from snapshot since that's all redux allows, so we need to convert to immutable DS

Getting Data from Redux to React
- redux store holds immutable application state
- need to get latest data from store to components and react would use pure render mixin to determine which parts of UI need to re-render
- can use react-redux to do this
- maps store state into component props
- maps actions into component callback props
- need to wrap top level component in Provider component whih connects component tree to a redux store
- need to determine whih components need to be wired up with data from store, usually the high level components
- can use connect method to do this wiring up
- connect(mapStateToProps)(SomeComponent)
- mapping function maps state from redux into props
- these props are connected to the component that's passed in

Setting up Socket.IO on the Client
- server can take incoming socket connections and emit voting state back
-need to configure client redux store to dispatch incoming data

Connect
- react redux can be used to wire up output actions to store
- Action creators - factory functions that return an action object
- essentially encapsulates the actions into a defined set of functions
- action creators can be connected to components as callback props
- if the callback prop and action creator have the same name and arguments, then react-redux connect will make the connection for us

React MiddleWare
-need to send clientside Vote action to the server so that it dispatches to BOTH stores
- Redux middleware - way to tap into actions that are being dispatched to redux stores
- function that gets invoked when action is dispatched, before the action hits the reducer and state
- we can use this to send client-side actions to the server